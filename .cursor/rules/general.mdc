---
description: ディレクトリ全体と開発フローに関するルール
globs:
alwaysApply: true
---

## コマンド仕様について

- 必要な開発環境は flake.nix に定義されている devShell に追加し、devShell で開発環境が完結するようにしてください。
- GitHub の操作は、devShell 上の`gh`コマンドを使用してください。

## 参照するファイルについて

- README.md にこのリポジトリの概要を記載しているので、必ず読み込むこと。
- docs/配下のドキュメントは、以下の概要を見て適宜読み込むこと。
  - api.md: サーバーが実装している API
  - architecture.md: WebView、クライアントのネイティブ、サーバーなどの構成について
  - bridge-interface.md: WebView とクライアントネイティブの間のブリッヂングメッセージについて
  - data-model.md: サーバーが DB に保存するデータモデル
  - flows.md: 想定ユーザーフローと内部のシステム間のシーケンス
  - implementation.md: 各言語における実装の tips
  - platform-specific.md: 各 OS におけるキャプチャ実装と権限管理の詳細
  - state-machines.md: アプリに含まれるステートの遷移
  - ui-design.md: UI 設計

## Git/GitHub 運用について

### commit

commit には以下の prefix のいずれかをつけること。

- feat: サービスのユーザー(開発者ではない)から見える新しい機能の実装
- fix: バグの修正
- docs: ドキュメントの修正
- style: フォーマッタ等による、コードの意味を変えない変更
- refactor: 機能追加・バグ修正を含まないリファクタリング
- perf: パフォーマンス向上のためのコード変更
- test: テストの新規追加または修正
- chore: コマンド実行やツール実行の結果生じた変更
- tool: 新規ツールの導入のための変更

また特定のデバイスに対する変更の場合、どれに対する commit かを prefix に続けて書くこと。`feat(web)`、`fix(windows)`など。コンポーネントは以下の中から選ぶ。

- web
- server
- windows
- ubuntu
- mac
- ios

**上記の prefix のいずれか 1 つに収まる分量**を commmit すること。複数の prefix にまたがる変更は分割して commit する。

例: web の新しい機能を TDD で実装し全体ドキュメントを修正した場合、

- テスト追加の commit: test(web)
- 新機能の本実装を行う commit: feat(web)
- 新機能に関するドキュメント修正の commit: docs

に分ける。

### commit 前のチェック事項

- formatter が設定されてい r る場合 formatter を実行すること。
- 変更を加えたファイルでエラーが出ている場合は commit 前に修正すること。
- この変更により不要になったファイル・コードが無いか、都度確認すること。不要なファイル・コードは次の commit で削除すること。
  - 例: ファイル内のヘルパーメソッドを使用しなくなったため、削除する。
  - 例: あるグローバル関数を使用しなくなり import 文が必要なくなったため、import 文を削除する
  - 例: import 文を削除したことでどのファイルからも import されないファイルができたため、ファイルを削除する。

### issue について

issue を元に機能追加・修正を行うこと。作業に対する issue が存在しない場合は、issue 追加から始めること。

### PR について

issue に対する実装が終わったら PR を作成すること。

### ブランチ運用について

各 issue に対し`issues/{issue-id}`ブランチを切り、main ブランチへの MR を作成する。

例: issue #10 に対し、`issues/10`ブランチを切る。

### PR 作成前のチェック事項

- ドキュメント(README.md、docs/配下の.md)に変更が必要ないか確認すること。
- テストがすべてパスすることを確認すること。

## Issue タグ運用について

### 使用可能なタグ一覧

#### タイプ別タグ

- `bug`: バグ修正（バグ報告テンプレートから自動付与）
- `enhancement`: 新機能・機能改善（機能追加テンプレートから自動付与）
- `documentation`: ドキュメントの追加・修正
- `question`: 質問・情報確認

#### 状態別タグ

- `duplicate`: 重複 issue
- `invalid`: 無効な issue
- `wontfix`: 対応しない

#### 優先度・特性タグ

- `good first issue`: 初めて貢献する人向け
- `help wanted`: 外部の助けが必要

#### コンポーネント別タグ

以下のコンポーネント別タグを使用して、issue がどのコンポーネントに関連するかを明示する。

- `web`: フロントエンド (React) - commit prefix: `(web)`
- `server`: バックエンド (Go) - commit prefix: `(server)`
- `linux`: Linux クライアント (Rust) - commit prefix: `(ubuntu)`
- `windows`: Windows クライアント (C++) - commit prefix: `(windows)`
- `macos`: macOS クライアント (Swift) - commit prefix: `(mac)`
- `ios`: iOS/iPadOS クライアント (Swift) - commit prefix: `(ios)`

### タグ付与ルール

#### issue テンプレート使用時の自動付与

- **バグ報告テンプレート**: `bug`タグが自動的に付与される
- **機能追加テンプレート**: `enhancement`タグが自動的に付与される

#### コンポーネントタグの付与基準

issue テンプレートの「影響範囲」チェックボックスに基づいて、以下のルールでコンポーネントタグを付与すること:

- 単一コンポーネントのみに影響する場合: そのコンポーネントのタグのみを付与
- 複数コンポーネントにまたがる場合: すべての関連コンポーネントのタグを付与
- 全体に影響する場合（ドキュメント、アーキテクチャ等）: コンポーネントタグを付与しない

例:

- WebView のみの変更 → `web`
- サーバー API とフロントエンドの両方を変更 → `server`, `web`
- README.md のみの更新 → コンポーネントタグなし

#### その他のタグ付与基準

- `documentation`: ドキュメントの追加・修正が主な目的の場合に付与
- `duplicate`: 既存の issue と重複している場合に付与し、重複元の issue 番号をコメントに記載
- `invalid`: issue の内容が不適切または無効な場合に付与
- `wontfix`: 対応しないことを決定した場合に付与し、理由をコメントに記載
- `good first issue`: 初めて貢献する人に適した issue に付与（難易度が低く、範囲が明確）
- `help wanted`: プロジェクトメンバー外からの助けが必要な場合に付与

### commit prefix とタグの対応関係

commit 時の prefix（例: `feat(web)`, `fix(server)`）と issue タグは以下のように対応する:

| commit prefix                                        | 対応する issue タグ |
| ---------------------------------------------------- | ------------------- |
| `feat`                                               | `enhancement`       |
| `fix`                                                | `bug`               |
| `docs`                                               | `documentation`     |
| `style`, `refactor`, `perf`, `test`, `chore`, `tool` | （対応タグなし）    |

コンポーネント指定: commit prefix の `(web)`, `(server)`, `(windows)`, `(ubuntu)`, `(mac)`, `(ios)` は、それぞれ対応するコンポーネントタグと連動する。

### タグ運用の注意点

#### タグの組み合わせ

以下のタグの組み合わせが一般的:

- `bug` + コンポーネントタグ（1 つ以上）
- `enhancement` + コンポーネントタグ（1 つ以上）
- `documentation`（単独、またはコンポーネントタグと組み合わせ）
- `question`（単独）

#### タグの更新タイミング

- issue の作成時: テンプレートによる自動付与 + 影響範囲に基づくコンポーネントタグの手動付与
- issue の調査中: 状況に応じて`duplicate`, `invalid`等を付与
- issue のクローズ時: 必要に応じて`wontfix`を付与

#### タグの一貫性

- 同一のバグや機能に関連する複数の issue には、同じコンポーネントタグを付与する
- PR と issue でタグの整合性を保つ（PR は対応する issue のタグを参照）
