---
description: ディレクトリ全体と開発フローに関するルール
globs:
alwaysApply: true
---

## 参照するファイルについて

- README.mdにこのリポジトリの概要を記載しているので、必ず読み込むこと。
- docs/配下のドキュメントは、以下の概要を見て適宜読み込むこと。
  - api.md: サーバーが実装しているAPI
  - architecture.md: WebView、クライアントのネイティブ、サーバーなどの構成について
  - bridge-interface.md: WebViewとクライアントネイティブの間のブリッヂングメッセージについて
  - data-model.md: サーバーがDBに保存するデータモデル
  - flows.md: 想定ユーザーフローと内部のシステム間のシーケンス
  - implementation.md: 各言語における実装のtips
  - platform-specific.md: 各OSにおけるキャプチャ実装と権限管理の詳細
  - state-machines.md: アプリに含まれるステートの遷移
  - ui-design.md: UI設計

## Git/GitHub運用について

### commit

commitには以下のprefixのいずれかをつけること。

- feat: ユーザーから見える新しい機能の実装
- fix: バグの修正
- docs: ドキュメントの修正
- style: フォーマッタ等による、コードの意味を変えない変更
- refactor: 機能追加・バグ修正を含まないリファクタリング
- perf: パフォーマンス向上のためのコード変更
- test: テストの新規追加または修正
- chore: コマンド実行やツール実行の結果生じた変更

**上記のprefixのいずれか1つに収まる分量**をcommmitすること。複数のprefixにまたがる変更は分割してcommitする。

例: 新しい機能をTDDで実装しドキュメントを修正した場合、

- テスト追加のtest commit
- 新機能の本実装を行うfeat commit
- 新機能に関するドキュメント修正のdocs commit

に分ける。

### commit前のチェック事項

- formatterが設定されていrる場合formatterを実行すること。
- 変更を加えたファイルでエラーが出ている場合はcommit前に修正すること。
- この変更により不要になったファイル・コードが無いか、都度確認すること。不要なファイル・コードは次のcommitで削除すること。
  - 例: ファイル内のヘルパーメソッドを使用しなくなったため、削除する。
  - 例: あるグローバル関数を使用しなくなりimport文が必要なくなったため、import文を削除する
  - 例: import文を削除したことでどのファイルからもimportされないファイルができたため、ファイルを削除する。

### issueについて

issueを元に機能追加・修正を行うこと。作業に対するissueが存在しない場合は、issue追加から始めること。

### MRについて

issueに対する実装が終わったらMRを作成すること。

### ブランチ運用について

各issueに対し`issues/{issue-id}`ブランチを切り、mainブランチへのMRを作成する。

例: issue #10に対し、`issues/10`ブランチを切る。

### MR作成前のチェック事項

- ドキュメント(README.md、docs/配下の.md)に変更が必要ないか確認すること。
- テストがすべてパスすることを確認すること。